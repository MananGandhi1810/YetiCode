import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, AlertCircle, AlertOctagon } from "lucide-react";

const severityOrder = {
  high: 3,
  medium: 2,
  low: 1,
};

export default function VulnerabilityAnalysis({ data }) {
  if (!data || data.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Analysis</CardTitle>
          <CardDescription>No vulnerabilities detected</CardDescription>
        </CardHeader>
        <CardContent>
          <p>
            Great job! Your code appears to be free of known vulnerabilities.
          </p>
        </CardContent>
      </Card>
    );
  }

  const getSeverityIcon = (severity) => {
    switch (severity.toLowerCase()) {
      case "low":
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case "medium":
        return <AlertCircle className="h-5 w-5 text-orange-500" />;
      case "high":
        return <AlertOctagon className="h-5 w-5 text-red-500" />;
      default:
        return null;
    }
  };

  const sortedVulnerabilities = [...data].sort((a, b) => {
    // First, sort by severity
    const severityDiff =
      severityOrder[b.severity.toLowerCase()] -
      severityOrder[a.severity.toLowerCase()];
    if (severityDiff !== 0) return severityDiff;

    // If severity is the same, sort by CVSS score (highest first)
    return (b.cvss.score || 0) - (a.cvss.score || 0);
  });

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Analysis</CardTitle>
        <CardDescription>
          Detected vulnerabilities in your dependencies (sorted by severity and
          CVSS score)
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Severity</TableHead>
              <TableHead>Package</TableHead>
              <TableHead>Vulnerability</TableHead>
              <TableHead>CVSS Score</TableHead>
              <TableHead>Affected Versions</TableHead>
              <TableHead>Patched Version</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedVulnerabilities.map((vuln, index) => (
              <TableRow key={index}>
                <TableCell>
                  <div className="flex items-center gap-2">
                    {getSeverityIcon(vuln.severity)}
                    <Badge variant={vuln.severity.toLowerCase()}>
                      {vuln.severity}
                    </Badge>
                  </div>
                </TableCell>
                <TableCell>{vuln.vulnerabilities[0].package.name}</TableCell>
                <TableCell>
                  <a
                    href={`https://github.com/advisories/${vuln.ghsa_id}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-500 hover:underline"
                  >
                    {vuln.summary}
                  </a>
                </TableCell>
                <TableCell>{vuln.cvss.score || "N/A"}</TableCell>
                <TableCell>
                  {vuln.vulnerabilities[0].vulnerable_version_range}
                </TableCell>
                <TableCell>
                  {vuln.vulnerabilities[0].first_patched_version}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
